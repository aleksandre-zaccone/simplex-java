{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome to your Java learning hub! </p> <p>Explore easy tutorials, awesome books, and fun courses. </p> <p>Join us and let's Java together !</p> <p></p>"},{"location":"#java-core","title":"Java Core","text":"<ul> <li>Whats is Java</li> <li>IntelliJ IDEA, Installation and Configuration </li> </ul>"},{"location":"#java-books","title":"Java Books","text":"<ul> <li>Core Java Volume I \u2013 Fundamentals</li> <li>Effective Java</li> <li>Java: A Beginner\u2019s Guide</li> <li>Java - The Complete Reference</li> <li>Java Concurrency in Practice</li> <li>Java Performance: The Definite Guide</li> <li>Clean Code \u2013 A Handbook of Agile Software Craftsmanship</li> </ul>"},{"location":"#spring-boot","title":"Spring Boot","text":"<ul> <li> <p>Spring Boot and Exceptions Handling</p> </li> <li> <p></p> </li> </ul>"},{"location":"#java-courses","title":"Java Courses","text":""},{"location":"#linux","title":"Linux","text":"<ul> <li>Arc Pacman commands</li> <li>MySql on Arch</li> </ul>"},{"location":"#other","title":"Other","text":"<ul> <li>Principles</li> </ul>"},{"location":"Principles/","title":"Principles","text":""},{"location":"Principles/#software-development-principles-and-best-practice","title":"Software Development Principles and Best Practice","text":""},{"location":"Principles/#dry-dont-repeat-yourself","title":"DRY  - Don\u2019t Repeat Yourself","text":"<p>Reduce redundancy by ensuring that each piece of knowledge or logic has a single, authoritative representation within a codebase.  In other words, every piece of information or functionality should exist in only one place in your software.</p> <p>The DRY principle aims to eliminate duplicated code, data, or design in a project. By adhering to this principle, you can achieve several benefits:</p> <ol> <li>Code Re-usability: When logic is centralized and not duplicated, it becomes easier to reuse that code in multiple parts of your application, reducing the need to rewrite the same code.</li> <li>Consistency: Changes or updates need to be made in only one place, ensuring that the behavior remains consistent across the application.</li> <li>Maintenance: Having a single source of truth reduces the chances of introducing bugs due to inconsistencies between duplicated code sections.</li> <li>Readability and Understandability: Developers can more easily understand and navigate the codebase when there's no redundancy, leading to improved collaboration and faster on-boarding for new team members.</li> <li>Efficiency: DRY code tends to be more efficient to manage and maintain over time, as you don't have to remember or update multiple occurrences of the same logic.</li> </ol>"},{"location":"Principles/#kiss-keep-it-simple-stupid","title":"KISS - Keep It Simple Stupid","text":"<p>The basic idea is to favor straightforward solutions that are easy to understand, maintain, and troubleshoot, rather than overly complex ones.</p> <ol> <li>Simplicity: Aim for the simplest solution that effectively solves the problem. Avoid unnecessary complexity and convoluted designs.</li> <li>Clarity: Make your code, architecture, and user interfaces clear and easy to understand. Avoid obscure or confusing structures that might hinder comprehension.</li> <li>Maintenance: Simple solutions are often easier to maintain and debug. Complex solutions can become difficult to modify or fix, leading to increased development time and potential errors.</li> <li>Efficiency: Complexity can introduce performance bottlenecks and increase resource usage. A simpler solution can often be more efficient and have better performance.</li> <li>Accessibility: A simple design is more accessible to other developers, allowing for easier collaboration and knowledge sharing.</li> <li>User Experience: In user interfaces, prioritize simplicity and ease of use. Overly complex interfaces can confuse users and lead to frustration.</li> </ol>"},{"location":"Principles/#solid","title":"SOLID","text":"<ul> <li>S - Single Responsibility Principle - Every class or module should come with its own responsibility for a single part of the feature offered in the software. </li> <li>O - Open/Closed Principle - Software entities like functions, modules, or classes must be closed for modification but open for extension.</li> <li>L - Liskov Substitution Principle - It means that objects of a derived (child) class should be able to replace objects of the parent class without affecting the correctness of the program.</li> <li>I - Interface Segregation Principle - Clients (classes that use interfaces) should not be forced to implement interfaces they do not use. In other words, it's better to have multiple small, specific interfaces rather than a single large, general-purpose interface.</li> <li>D - Dependency Inversion Principle- High-level modules (classes or components that manage the overall flow of your program) should not depend on low-level modules (classes that perform specific tasks). Both high-level and low-level modules should depend on abstractions (interfaces or abstract classes) rather than concrete implementations. Abstractions should not depend on details; details should depend on abstractions.</li> </ul>"},{"location":"Principles/#yagni-you-arent-gonna-need-it","title":"YAGNI - You Aren\u2019t Gonna Need It","text":"<p>Do not add functionality to your codebase until you actually need it to solve a specific problem or fulfill a requirement. In other words, don't implement features or capabilities based on speculation or assumptions about future needs.</p>"},{"location":"Principles/#bduf-big-design-up-front","title":"BDUF - Big Design Up Front","text":"<p>Figure out general design first and than implement it. </p>"},{"location":"Advanced%20Java/Tutorials/","title":"Tutorials","text":""},{"location":"Advanced%20Java/Tutorials/#coming-soon","title":"COMING SOON","text":""},{"location":"Core%20Java/1.%20Whats%20is%20Java/","title":"Whats is Java","text":"<p>Java is a widely used, object-orienting, high-level programming language developed by Sun Microsystems (acquired by Oracle Corporation).</p> <p>Java is designed to be platform-independent, meaning that programs written in Java can run on different operating systems without modification.</p> <p>Key features and characteristics of Java include:</p> <ul> <li>Object-Oriented: Java is based on the principles of object-oriented programming (OOP), which means it organizes code into reusable, modular units called objects. OOP promotes code organization, re-usability, and ease of maintenance. </li> <li>Platform Independence: Java applications are compiled into an intermediate form called bytecode, which can be executed on any platform that has a Java Virtual Machine (JVM). This allows Java programs to run on different operating systems without modification. </li> <li>Strongly Typed: Java enforces strict type-checking, which helps catch errors at compile-time rather than runtime. This enhances code reliability and reduces unexpected errors. </li> <li>Garbage Collection: Java includes automatic memory management through garbage collection, which helps manage memory and deallocates memory resources for objects that are no longer in use. </li> <li>Multi-Threaded: Java supports multi-threading, allowing developers to create applications that can perform multiple tasks concurrently. This is particularly useful for tasks like handling user interfaces and managing concurrent network connections. </li> <li>Rich Standard Library: Java comes with a comprehensive standard library (Java Standard Library or Java API) that provides a wide range of pre-built classes and methods for common programming tasks, such as data structures, input/output, networking, and more. </li> <li>Security: Java has built-in security features, such as sandboxing, which restricts the actions of potentially malicious code, making it a popular choice for building secure applications.</li> </ul> <p>Official link:</p> <ul> <li>Web Site</li> <li>Documentation</li> </ul>"},{"location":"Core%20Java/2.%20IntelliJ%20IDEA%2C%20Installation%20and%20Configuration/","title":"Overview of IntelliJ IDEA","text":"<p>IntelliJ IDEA is an Integrated Development Environment (IDE) designed for JVM languages to enhance developer productivity. It automates routine tasks with clever code completion, static code analysis, and refactoring, allowing you to focus on the positive aspects of software development, making it not just efficient, but also enjoyable.</p> <p></p>"},{"location":"Core%20Java/2.%20IntelliJ%20IDEA%2C%20Installation%20and%20Configuration/#multi-platform-support","title":"Multi-platform Support","text":"<p>IntelliJ IDEA is a cross-platform IDE providing a consistent experience across Windows, macOS, and Linux. The easiest way is to use JetBrains Toolbox</p> <ul> <li>For Windows - run the installer and follow the wizard steps.</li> <li>For MacOS - mount the image and drag the JetBrains Toolbox app to the Applications folder.</li> <li>For Linux - Extract the tarball to a directory that supports file execution. For example, if the downloaded version is 1.17.7391, you can extract it to the recommended /opt directory using the following command: <pre><code>sudo tar -xzf jetbrains-toolbox-1.17.7391.tar.gz -C /opt\n</code></pre> Execute the jetbrains-toolbox binary from the extracted directory to run the Toolbox App.</li> </ul> <p></p>"},{"location":"Core%20Java/2.%20IntelliJ%20IDEA%2C%20Installation%20and%20Configuration/#supported-languages","title":"Supported Languages","text":"<p>IntelliJ IDEA is designed for JVM languages (Java, Kotlin, Scala, Groovy) but can support multiple languages, tools, frameworks, and technologies through plugins.</p> <p></p>"},{"location":"Core%20Java/2.%20IntelliJ%20IDEA%2C%20Installation%20and%20Configuration/#plugins-and-themes","title":"Plugins and Themes","text":"<p>IntelliJ has a marketplace, where you can download plugins and themes  -JetBrains Marketplace</p> <p>My top Plugins:</p> <ul> <li>Lombok - Lombok Tutorial</li> <li>SonarLint</li> <li>AWS ToolKit</li> <li>Docker</li> <li>Mario Progress Bar</li> <li>Rainbow Brackets</li> <li>JPA Buddy</li> <li>String Manipulation</li> <li>Randomness</li> </ul> <p>My favorite Theme:</p> <ul> <li>One Dark</li> </ul> <p></p>"},{"location":"Core%20Java/2.%20IntelliJ%20IDEA%2C%20Installation%20and%20Configuration/#intellij-idea-editions","title":"IntelliJ IDEA Editions","text":"<p>IntelliJ IDEA comes in two editions:</p> <ul> <li>IntelliJ IDEA Ultimate: A full-featured Java and Kotlin IDE with support for other languages, server-side and front-end frameworks, databases, profiling tools, and more.</li> <li>IntelliJ IDEA Community Edition: A free IDE with essential features for Java and Kotlin enthusiasts.</li> </ul> <p>You can compare editions using the IntelliJ IDEA editions comparison matrix. I recommend Ultimate edition because it has some additional everyday features like: - SQL, Hibernate, JPA, Database Tools - this help you work with databases from IntelliJ  - HTTP Client - you can call endpoints directly from IntelliJ - Profiling tools - you profile an application without leaving the IDE. - Thymeleaf, Freemarker, React, React Native - support fronted languages - Settings synchronization via JetBrains Account - you can synchronize almost all settings between your machines under the same account</p> <p></p>"},{"location":"Core%20Java/2.%20IntelliJ%20IDEA%2C%20Installation%20and%20Configuration/#user-interface","title":"User Interface","text":"<p>IntelliJ IDEA provides an editor-centric environment that adapts to your context and minimizes disruptions. For more details, about how to use  IntelliJ, I recommend this  tutorial - Amigoscode - IntelliJ IDEA Full Course </p> <p></p>"},{"location":"Core%20Java/2.%20IntelliJ%20IDEA%2C%20Installation%20and%20Configuration/#intellij-idea-top-features","title":"IntelliJ IDEA - TOP Features","text":"<ul> <li>Customizable Appearance</li> <li>Handy Shortcuts</li> <li>Navigation and Search</li> <li>Coding Assistance</li> <li>Context-Aware Code Completion</li> <li>Code Refactoring</li> <li>Static Code Analysis</li> <li>Code Generation</li> <li>Integration with Developer Tools</li> <li>Debugger</li> <li>Profiler</li> <li>Terminal</li> <li>Build Tools (Maven / Gradle)</li> <li>Version Control (GIT)</li> <li>Local History</li> </ul>"},{"location":"Core%20Java/2.%20IntelliJ%20IDEA%2C%20Installation%20and%20Configuration/#intellij-tutorials","title":"IntelliJ Tutorials","text":"<ul> <li>Jetbrains IntelliJ Tutorial - FREE</li> <li>IntelliJ IDEA Developer Guide By Amigoscode</li> <li>IntelliJ IDEA Course by Amigoscode - FREE </li> <li>IntelliJ IDEA Tricks to Boost Productivity for Java Devs</li> </ul>"},{"location":"Git/Git%20Commands/","title":"git init","text":"<p>The <code>git init</code> command creates a new Git repository. It can be used to convert an existing, unversioned project to a Git repository or initialize a new, empty repository.</p> <p>Executing <code>git init</code> creates a .git subdirectory in the current working directory, which contains all of the necessary Git metadata for the new repository. This metadata includes subdirectories for objects, refs, and template files. A HEAD file is also created which points to the currently checked out commit.</p>"},{"location":"Git/Git%20Commands/#git-config","title":"git config","text":"<p>Get and set repository or global options.  By default, <code>git config</code> will write to a local level if no configuration option is passed. Local configuration values are stored in a file that can be found in the repo's .git directory: `.git/config</p> <p>Global level configuration is user-specific, meaning it is applied to an operating system user. Global configuration values are stored in a file that is located in a user's home directory. ~ <code>/.gitconfig</code> on unix systems and <code>C:\\Users\\\\.gitconfig</code> on windows ` To read configuration: <pre><code>git config user.name\ngit config user.email\ngit config --list\n</code></pre></p> <p>To write values: <pre><code>git config --global user.name \"Aleksandre Ablotia\"\ngit config --global user.email \"your_email@example.com\"\ngit config --global core.editor kate\ngit config --global merge.tool kdiff3\ngit config --global color.ui true\n</code></pre></p>"},{"location":"Git/Git%20Commands/#git-branch","title":"git branch","text":"<p>The <code>git branch</code> command lets you create, list, rename, and delete branches. Git does not creates a master branch until first commit <pre><code>git branch // List all local branches. \ngit branch &lt;branch&gt; // creates a branch with given name, but dont checkout new branch\ngit branch -d &lt;branch&gt; // deletes branche by given name (safe mode)\ngit branch -D &lt;branch&gt; // deletes branche by given name (force mode)\ngit branch -m &lt;branch&gt; // Rename the current branch to \"branch\"\ngit branch -a // List all remote branches. \n</code></pre></p>"},{"location":"Git/Git%20Commands/#git-checkout","title":"git checkout","text":"<p>The <code>git checkout</code> let us switch between branches. <pre><code>git checkout &lt;branch&gt; // switch to another branch\ngit checkout -b \uff1cnew-branch\uff1e // create and switch to new branch\n</code></pre></p>"},{"location":"Git/Git%20Commands/#git-add","title":"git add","text":"<p>The <code>git add</code> command adds a change in the working directory to the staging area. It tells Git that you want to include updates to a particular file in the next commit. However, <code>git add</code> doesn't really affect the repository in any significant way\u2014changes are not actually recorded until you run <code>git commit</code>. <pre><code>git add &lt;file&gt; // add file\ngit add &lt;directory&gt; // add directory\n</code></pre></p>"},{"location":"Git/Git%20Commands/#git-commit","title":"git commit","text":"<p>The <code>git commit</code> command captures a snapshot of the project's currently staged changes.  <pre><code>git commit // commit one by one\ngit commit -a // commit all\ngit commit -m \"commit message\" // commit and add message\ngit commit -am \"commit message\" // commit all and add message\ngit commit --amend // add changes to last commit\n</code></pre></p>"},{"location":"Git/Git%20Commands/#git-status","title":"git status","text":"<p>The <code>git status</code> command displays the state of the working directory and the staging area. It lets you see which changes have been staged, which haven\u2019t, and which files aren\u2019t being tracked by Git</p>"},{"location":"Git/Git%20Commands/#git-merge","title":"git merge","text":""},{"location":"Git/Git%20Commands/#git-push","title":"git push","text":"<p><code>git push</code> is most commonly used to publish an upload local changes to a central repository. After a local repository has been modified a push is executed to share the modifications with remote team members. <pre><code>git push\ngit push --all // Push all branches\n</code></pre></p>"},{"location":"Git/Git%20Commands/#git-clone","title":"git clone","text":"<p><code>git clone</code> command clones (download) a repository that already exists on GitHub, including all of the files, branches, and commits. <pre><code>git clone [url] // clone/copy remote repository with all data\ngit clone [url] --branch [branch] --single-branch // clone only one branch\n</code></pre></p>"},{"location":"Git/Git%20Commands/#git-remote","title":"git remote","text":"<p>The <code>git remote</code> command is essentially an interface for managing a list of remote entries that are stored in the repository's <code>./.git/config</code> file. <pre><code>git remote // List the remote connections we have to other repositories.\ngit remote -v // Same as the above command, but include the URL of each connection.\n</code></pre></p>"},{"location":"Git/Git%20Commands/#git-fetch","title":"git fetch","text":"<p>The <code>git fetch</code> command downloads commits, files, and refs from a remote repository into your local repo, but not update your local repo's working state, leaving your current work intact. <pre><code>git fetch &lt;remote&gt; // fetch all\ngit fetch &lt;remote&gt; &lt;branch&gt; // fetch only one branch\n</code></pre></p>"},{"location":"Git/Git%20Commands/#git-pull","title":"git pull","text":"<p>The <code>git pull</code> command is used to fetch and download content from a remote repository and immediately update the local repository to match that content. Merging remote upstream changes into your local repository is a common task in Git-based collaboration work flows. The <code>git pull</code> command is actually a combination of two other commands, <code>git fetch</code> followed by <code>git merge</code>. In the first stage of operation git pull will execute a <code>git fetch</code> scoped to the local branch that HEAD is pointed at. Once the content is downloaded, <code>git pull</code> will enter a merge workflow. A new merge commit will be-created and HEAD updated to point at the new commit. <pre><code>git pull &lt;remote&gt; // fetch + merge + create merge commit\ngit pull --no-commit &lt;remote&gt; // fetch + merge\n</code></pre></p>"},{"location":"Git/Git%20Commands/#git-clean","title":"git clean","text":""},{"location":"Git/Git%20Commands/#git-reset","title":"git reset","text":""},{"location":"Git/Git%20Commands/#git-revert","title":"git revert","text":""},{"location":"Git/Git%20Commands/#git-log","title":"git log","text":""},{"location":"Git/Git%20Commands/#git-rebase","title":"git rebase","text":""},{"location":"Git/Git%20Commands/#git-rebase-i","title":"git rebase -i","text":""},{"location":"Kubernates/Kubernates/","title":"Kubernetes","text":""},{"location":"Linux/ArchPacmanCommands/","title":"Arch Pacman Commands","text":"<p>Arch's pacman is a powerful package manager used to install, remove, upgrade, and manage software on your system.  This tutorial will guide you through understanding pacman's syntax, common flags, and optional flags with examples.</p> <p></p>"},{"location":"Linux/ArchPacmanCommands/#pacman-syntax-breakdown","title":"Pacman Syntax Breakdown","text":"<p>The basic syntax for a pacman command follows this structure: <pre><code>pacman &lt;flag&gt; [options] &lt;package_name(s)&gt;\n</code></pre></p> <ul> <li> <p>pacman: This is the command itself flag: This tells pacman what action to take.</p> </li> <li> <p>Common flags include:</p> <ul> <li>S: Install packages (including dependencies)</li> <li>R: Remove packages</li> <li>Q: Query package information</li> </ul> </li> <li>options: These are optional flags that modify the behavior of the main flag.<ul> <li>s: Search for a package in the repositories (local and remote), do not install</li> <li>u: Upgrade all out-of-date packages</li> <li>y: Refresh package databases</li> </ul> </li> <li>package_name(s): This specifies the name(s) of the package(s) you want to interact with. You can provide multiple package names separated by spaces.</li> </ul> <p></p>"},{"location":"Linux/ArchPacmanCommands/#most-commonly-used-pacman-commands-in-arch-linux-with-examples","title":"Most commonly used Pacman commands in Arch Linux with examples","text":"<ol> <li> <p>Updating the package database and upgrading all packages:    <pre><code>sudo pacman -Syu\n</code></pre>    This command synchronizes the local package database with the remote repositories and then upgrades all installed packages to their latest versions. </p> </li> <li> <p>Installing a package:    <pre><code>sudo pacman -S &lt;package_name&gt;\n</code></pre>    This command installs the specified package and its dependencies.</p> </li> <li> <p>Removing a package:    <pre><code>sudo pacman -R &lt;package_name&gt;\n</code></pre>    This command removes the specified package from the system.</p> </li> <li> <p>Searching for a package:    <pre><code>pacman -Ss &lt;search_term&gt;\n</code></pre>    This command searches the package databases for packages matching the given search term.</p> </li> <li> <p>Listing installed packages:    <pre><code>pacman -Q\n</code></pre>    This command lists all the packages currently installed on the system.</p> </li> <li> <p>Listing explicitly installed packages:    <pre><code>pacman -Qe\n</code></pre>    This command lists the packages that were explicitly installed by the user, as opposed to those installed as dependencies.</p> </li> <li> <p>Listing orphaned dependencies:    <pre><code>pacman -Qdt\n</code></pre>    This command lists the packages that are no longer required by any other package and can be safely removed.</p> </li> <li> <p>Removing orphaned dependencies:    <pre><code>sudo pacman -Rns $(pacman -Qdtq)\n</code></pre>    This command removes all the orphaned dependencies from the system.</p> </li> <li> <p>Displaying package information:    <pre><code>pacman -Qi &lt;package_name&gt;\n</code></pre>    This command displays detailed information about the specified package.</p> </li> <li> <p>Listing files owned by a package:     <pre><code>pacman -Ql &lt;package_name&gt;\n</code></pre>     This command lists all the files that are owned by the specified package.</p> </li> </ol>"},{"location":"Linux/MySQL%20on%20Arch/","title":"MySQL on Arch","text":""},{"location":"Linux/MySQL%20on%20Arch/#update-package-list","title":"Update Package List","text":"<pre><code>sudo pacman -Syu\n</code></pre>"},{"location":"Linux/MySQL%20on%20Arch/#install-mariab","title":"Install mariaB","text":"<pre><code>sudo macman -S mariadb\n</code></pre>"},{"location":"Linux/MySQL%20on%20Arch/#start-mariadb","title":"Start mariadb","text":"<pre><code>sudo systemctl start mariadb\n</code></pre>"},{"location":"Linux/MySQL%20on%20Arch/#enable-mariadb","title":"Enable mariadb","text":"<pre><code>sudo systemctl enable mariadb\n</code></pre>"},{"location":"Linux/MySQL%20on%20Arch/#stop-mariadb","title":"Stop mariadb","text":"<pre><code>sudo systemctl stop mariadb\n</code></pre>"},{"location":"Linux/MySQL%20on%20Arch/#check-status","title":"Check status","text":"<pre><code>sudo systemctl status mariadb\n</code></pre>"},{"location":"Linux/MySQL%20on%20Arch/#secure-mariadb-installation","title":"Secure mariadb installation","text":"<pre><code>sudo mysql_secure_installation\n</code></pre>"},{"location":"Linux/MySQL%20on%20Arch/#additional-resources","title":"Additional Resources","text":"<p>ArchWiki MariaDB Page</p> <p>Official MariaDB Documentation</p>"},{"location":"Spring%20Boot/Spring%20Boot%20and%20Exceptions%20Handling/","title":"Spring Boot and Exception Handling","text":""},{"location":"Spring%20Boot/Spring%20Boot%20and%20H2/","title":"Spring Boot and H2","text":""},{"location":"Spring%20Boot/Spring%20Boot%20and%20H2/#project-details","title":"Project Details","text":"<p>Project Name: Product Management System</p> <p>Project Description: A simple system with a REST API to add, update, and remove products from an H2 database.</p> <p>Tools Used:</p> <ul> <li> <p>Java 17</p> </li> <li> <p>Spring Boot 3.1.2</p> </li> <li> <p>Spring Web</p> </li> <li> <p>Spring Data JPA</p> </li> <li> <p>Lombok</p> </li> <li> <p>H2</p> </li> </ul> <p></p>"},{"location":"Spring%20Boot/Spring%20Boot%20and%20H2/#what-is-h2-database","title":"What is H2 Database","text":"<p>H2 is a lightweight, open-source, Java-based relational database engine. It is designed to be fast and embeddable, making it an excellent choice for testing and development purposes. One of its notable features is its ability to run in-memory, meaning that data is stored in memory rather than persisted to disk. This makes it extremely fast for temporary data storage and manipulation.</p> <p>Official Site - https://www.h2database.com/html/main.html</p> <p></p>"},{"location":"Spring%20Boot/Spring%20Boot%20and%20H2/#how-to-set-up-and-use-h2-with-spring-boot","title":"How to set-up and use H2 with Spring boot","text":"<p>Here's a step-by-step tutorial on how to set up and use the H2 in-memory database with Spring Boot and Java.</p> <p>You can download the project from Git - https://github.com/aleksandre-zaccone/SpringBoot-H2-Tutorial</p> <p></p>"},{"location":"Spring%20Boot/Spring%20Boot%20and%20H2/#step-1-create-a-spring-boot-project","title":"Step 1: Create a Spring Boot Project:","text":"<p>If you don't have a Spring Boot project already, you can create one using Spring Initializr (https://start.spring.io/). Include the necessary dependencies: Spring Web and H2 Database.</p>"},{"location":"Spring%20Boot/Spring%20Boot%20and%20H2/#step-2-configure-h2-database","title":"Step 2: Configure H2 Database:","text":"<p>In your application.yml file, add the following H2 database configuration:</p> <pre><code>Spring:\n// This property enables the H2 Database Console. The H2 console is a web-based interface that allows you to interact with the H2 in-memory database.\n  h2:\n    console:\n      enabled: true\n\n/* \nspring.datasource.url: jdbc:h2:mem:ProductManagement - This is the JDBC URL of the H2 database. Here, we are specifying that we want to connect to an H2 in-memory database named \"ProductManagement\".\n\nspring.datasource.driverClassName: org.h2.Driver - This property specifies the fully qualified class name of the JDBC driver to use. In this case, it's the driver for the H2 database.\n\nspring.datasource.username: sa - This is the username to be used when connecting to the database. In H2, \"sa\" is the default username for the built-in user.\n\nspring.datasource.password: - This is the password to be used when connecting to the database. For H2 in-memory databases, the password is typically left empty.\n*/\n\n  datasource:\n    url: jdbc:h2:mem:ProductManagement\n    driverClassName: org.h2.Driver\n    username: sa\n    Password:\n\n/* \nspring.jpa.database-platform: org.hibernate.dialect.H2Dialect - This property sets the Hibernate database dialect for H2. Hibernate is an Object-Relational Mapping (ORM) framework used to interact with databases. The dialect defines how Hibernate generates SQL queries specific to the chosen database.\n*/\n  jpa:\n    database-platform: org.hibernate.dialect.H2Dialect\n</code></pre> <p>Do not forget to remove all text from the comment section. YAML files do not understand Java comments, and you may encounter errors if you do not remove them.</p> <p>Upon the application's completion, the H2 database can be explored via the UI at the following console URL: http://localhost:8080/h2-console.</p> <p>To log in to the H2 database, use the properties from the yaml.file.</p> <p></p> <p></p>"},{"location":"Spring%20Boot/Spring%20Boot%20and%20H2/#step-3-create-an-entity","title":"Step 3: Create an Entity:","text":"<p>Create a Java class representing an entity that you want to store in the database. For our Application we use Product.class</p> <pre><code>@AllArgsConstructor\n@NoArgsConstructor\n@Data\n@Builder\n@Entity\npublic class Product {\n   @Id\n   @GeneratedValue(strategy = GenerationType.IDENTITY)\n   private Long id;\n   private String name;\n   private double price;\n}\n</code></pre>"},{"location":"Spring%20Boot/Spring%20Boot%20and%20H2/#step-4-create-a-repository","title":"Step 4: Create a Repository","text":"<p>Create a repository for Create, Read, Update, and Delete operations:</p> <pre><code>@Repository\npublic interface ProductRepository extends JpaRepository&lt;Product, Long&gt; {\n\n   Optional&lt;Product&gt; findById(Long id);\n\n   List&lt;Product&gt; findByName(String name);\n\n}\n</code></pre>"},{"location":"Spring%20Boot/Spring%20Boot%20and%20H2/#step-5-create-the-service","title":"Step 5: Create the Service","text":"<p>Create a service class to implement ProductRepository:</p> <pre><code>@Service\npublic class ProductService {\n\n   @Autowired\n   private ProductRepository productRepository;\n\n   public List&lt;Product&gt; getAllProducts() {\n       return productRepository.findAll();\n   }\n\n   public Optional&lt;Product&gt; getProductById(Long id) {\n       return productRepository.findById(id);\n   }\n\n   public List&lt;Product&gt; getProductsByName(String name) {\n       return productRepository.findByName(name);\n   }\n\n   public Product saveProduct(Product product) {\n       return productRepository.save(product);\n   }\n\n   public void deleteProductById(Long id) {\n       productRepository.deleteById(id);\n   }\n\n}\n</code></pre>"},{"location":"Spring%20Boot/Spring%20Boot%20and%20H2/#step-6-create-the-restcontroller","title":"Step 6: Create the RestController","text":""},{"location":"Spring%20Boot/Spring%20Boot%20and%20H2/#create-a-restcontroller-with-endpoints","title":"Create a RestController with endpoints:","text":"<pre><code>@RestController\n@RequestMapping(\"/api/products\")\npublic class ProductController {\n\n   @Autowired\n   private ProductService productService;\n\n   @GetMapping\n   public List&lt;Product&gt; getAllProducts() {\n       return productService.getAllProducts();\n   }\n\n   @GetMapping(\"/{id}\")\n   public ResponseEntity&lt;Product&gt; getProductById(@PathVariable Long id) {\n       Optional&lt;Product&gt; product = productService.getProductById(id);\n       return product.map(ResponseEntity::ok).orElse(ResponseEntity.notFound().build());\n   }\n\n   @GetMapping(\"/search\")\n   public List&lt;Product&gt; getProductsByName(@RequestParam(name = \"name\", required = true) String name) {\n       return productService.getProductsByName(name);\n   }\n\n   @PostMapping\n   public Product addProduct(@RequestBody Product product) {\n       return productService.saveProduct(product);\n   }\n\n   @PutMapping(\"/{id}\")\n   public ResponseEntity&lt;Product&gt; updateProduct(@PathVariable Long id, @RequestBody Product product) {\n       Optional&lt;Product&gt; existingProduct = productService.getProductById(id);\n\n       if (existingProduct.isPresent()) {\n           product.setId(id);\n           productService.saveProduct(product);\n           return ResponseEntity.ok(product);\n       } else {\n           return ResponseEntity.notFound().build();\n       }\n   }\n\n   @DeleteMapping(\"/{id}\")\n   public ResponseEntity&lt;Void&gt; deleteProductById(@PathVariable Long id) {\n       productService.deleteProductById(id);\n       return ResponseEntity.noContent().build();\n   }\n\n}\n</code></pre> <p>This controller provides a simple Create, Read, Update, and Delete (CRUD) API for managing products using Spring Boot and H2.</p> <p>It includes methods for retrieving all products, retrieving a product by ID, searching for products by name, adding a new product, updating an existing product, and deleting a product by ID.</p> <p>The @PathVariable annotation is used to retrieve a product by ID, and the @RequestParam annotation is used to search for products by name.</p>"},{"location":"Spring%20Boot/Spring%20Boot%20and%20H2/#step-7-test-api-from-postman","title":"Step 7: Test API from Postman","text":""},{"location":"Spring%20Boot/Spring%20Boot%20and%20H2/#endpoints","title":"Endpoints:","text":"<ul> <li> <p>GET All Products:</p> <ul> <li> <p>Method: GET</p> </li> <li> <p>URL: http://localhost:8080/api/products</p> </li> </ul> </li> <li> <p>GET Product by ID:</p> <ul> <li> <p>Method: GET</p> </li> <li> <p>URL: http://localhost:8080/api/products/{id}</p> </li> <li> <p>Example: http://localhost:8080/api/products/1</p> </li> </ul> </li> <li> <p>GET Products by Name (Search):</p> <ul> <li> <p>Method: GET</p> </li> <li> <p>URL: http://localhost:8080/api/products/search?name={name}</p> </li> <li> <p>Example: http://localhost:8080/api/products/search?name=Google%20Fold%20Phone</p> </li> </ul> </li> <li> <p>POST Add Product:</p> <ul> <li> <p>Method: POST</p> </li> <li> <p>URL: http://localhost:8080/api/products</p> </li> <li> <p>Headers: Content-Type: application/json</p> </li> <li> <p>Body (raw JSON): <pre><code>{ \"name\": \"Google Fold Phone\", \"price\": 1499.99 }\n</code></pre></p> </li> </ul> </li> <li> <p>PUT Update Product by ID:</p> <ul> <li>Method: PUT</li> <li>URL: http://localhost:8080/api/products/{id}</li> <li>Example: http://localhost:8080/api/products/1</li> <li>Headers: Content-Type: application/json</li> <li>Body (raw JSON): <pre><code>{ \"name\": \"Updated Google Fold Phone\", \"price\": 1599.99 }\n</code></pre></li> </ul> </li> <li> <p>DELETE Product by ID:</p> <ul> <li> <p>Method: DELETE</p> </li> <li> <p>URL: http://localhost:8080/api/products/{id}</p> </li> <li> <p>Example: http://localhost:8080/api/products/1</p> </li> </ul> </li> </ul>"},{"location":"Spring%20Boot/Spring%20Boot%20and%20H2/#to-use-postman","title":"To use Postman","text":"<ol> <li> <p>Open Postman.</p> </li> <li> <p>Select the appropriate HTTP method (GET, POST, PUT, DELETE).</p> </li> <li> <p>Enter the endpoint URL.</p> </li> <li> <p>If required, add headers (such as Content-Type: application/json) based on the request.</p> </li> <li> <p>Add the request body (for POST and PUT requests) in JSON format.</p> </li> <li> <p>Click the \"Send\" button to make the request.</p> </li> </ol> <p>You can customize the examples above based on your specific use case and the actual data you want to send or receive.</p>"},{"location":"Tools%20and%20Libraries/Lombok/","title":"Lombok Project","text":""},{"location":"Tools%20and%20Libraries/Lombok/#what-is-lombok","title":"What is Lombok","text":"<p>Java is a powerful programming language, but sometimes it requires a lot of words to do simple things. This can make your code long and repetitive, especially when you have to do things like creating <code>getters</code> and <code>setters</code>. This extra code doesn't really help your program do its main job. Writing this kind of code is not only boring but also takes up a lot of time. To fix this problem, we can use special tools and libraries that make it easier and faster to write code. And that's where Lombok comes in!</p> <p>Lombok is a helpful tool for Java that solves the problem of writing the same code over and over. It does this by using special notes (called annotations) so you don't have to write common code that's usually repeated and takes a lot of time. Lombok works with your code and creates the necessary building blocks automatically based on these annotations. This means you can avoid making certain parts of your code, like constructors, equals, and hashCode functions, which saves you a lot of time. It lets you focus more on the important parts of your project. Plus, using Lombok keeps your code neat, tidy, and easier to read and work with. </p>"},{"location":"Tools%20and%20Libraries/Lombok/#install-lombok","title":"Install Lombok","text":"<p>We can install Lombok in different ways: - manually  - add dependency int the project for Maven or Gradle - via Lombok plugin - add Lombok plugin if you use IntelliJ IDEA Lombok requires annotation processing to work properly. Make sure that annotation processing is enabled in your IDE or build tool settings.</p> <p></p>"},{"location":"Tools%20and%20Libraries/Lombok/#lombok-annotations","title":"Lombok Annotations","text":"<p>Let's take a look at some of the most frequently used Lombok annotations. I'll provide an explanation for each annotation, along with a comparison to the equivalent Java code.  If you want to explore more detailed examples and get additional support, you can click on each annotation to visit its page in the official Lombok documentation.</p>"},{"location":"Tools%20and%20Libraries/Lombok/#getter-and-setter","title":"@Getter and @Setter","text":"<p>Let's dive into the <code>@Getter</code> and <code>@Setter</code> annotations. When you apply the <code>@Getter</code> annotation to a field, like \"cardNumber,\" Lombok will automatically generate a method called <code>getCardNumber()</code>. This method simply retrieves the value stored in the \"cardNumber\" field.</p> <p>On the other hand, when you use the <code>@Setter</code> annotation on the \"cardNumber\" field, Lombok will create a corresponding setter method called <code>setCardNumber()</code>. This setter method takes a parameter of the same type as the \"cardNumber\" field and assigns it to the field.</p> <p>By default, these generated getter and setter methods are public, but you have the flexibility to adjust their access level. For instance, you can set them to be protected using AccessLevel, like:</p> <ol> <li><code>AccessLevel.PUBLIC</code>: The generated methods and fields will have public visibility, accessible from anywhere.</li> <li><code>AccessLevel.PRIVATE</code>: The generated methods and fields will have private visibility, accessible only within the same class.</li> <li><code>AccessLevel.PROTECTED</code>: The generated methods and fields will have protected visibility, accessible within the same package and subclasses.</li> <li><code>AccessLevel.PACKAGE</code>: The generated methods and fields will have package-private visibility, accessible within the same package.</li> <li><code>AccessLevel.MODULE</code>: The generated methods and fields will have module visibility, accessible within the same module.</li> <li><code>AccessLevel.NONE</code>: No method or field is generated.</li> </ol> <p>Remember, these annotations aren't limited to individual fields. You can also apply them at the class level, which results in the automatic creation of getter and setter methods for all fields within the class. This streamlined approach not only reduces boilerplate code but also enhances the readability and maintainability of your Java code.</p> <p>Example with Lombok: <pre><code>@Getter\n@Setter\npublic class CreditCard {\n    private int cardNumber;\n    private String cardHolderName;\n    @Setter(AccessLevel.PROTECTED)\n    private String expirationDate;\n}\n</code></pre></p> <p>Example without Lombok: <pre><code>public class CreditCard {\n    private int cardNumber;\n    private String cardHolderName;\n    private String expirationDate;\n\n    public int getCardNumber() {\n        return cardNumber;\n    }\n\n    public void setCardNumber(int cardNumber) {\n        this.cardNumber = cardNumber;\n    }\n\n    public String getCardHolderName() {\n        return cardHolderName;\n    }\n\n    public void setCardHolderName(String cardHolderName) {\n        this.cardHolderName = cardHolderName;\n    }\n\n    public String getExpirationDate() {\n        return expirationDate;\n    }\n\n    protected void setExpirationDate(String expirationDate) {\n        this.expirationDate = expirationDate;\n    }\n}\n</code></pre></p>"},{"location":"Tools%20and%20Libraries/Lombok/#noargsconstructor-allargsconstructor-and-requiredargsconstructor","title":"@NoArgsConstructor, @AllArgsConstructor and  @RequiredArgsConstructor","text":"<p>When you use the <code>@NoArgsConstructor</code> annotation, it generates a constructor without any parameters. Conversely, by applying <code>@AllArgsConstructor</code>, a constructor is produced with parameters that match each field in the class.  Meanwhile, <code>@RequiredArgsConstructor</code> creates a constructor customized for fields needing special handling \u2013 like non-initialized final fields or fields marked as <code>@NonNull</code> but not initialized in their declaration. Notably, these annotations don't affect static fields.</p> <p>Example with Lombok: <pre><code>@NoArgsConstructor\n@AllArgsConstructor\n@RequiredArgsConstructor\npublic class CreditCard {\n    private int cardNumber;\n    private String cardHolderName;\n    private String expirationDate;\n    private final String bankName;\n}\n</code></pre></p> <p>Example without Lombok: <pre><code>public class CreditCard {\n    private int cardNumber;\n    private String cardHolderName;\n    private String expirationDate;\n    private final String bankName;\n\n    public CreditCard() {\n    }\n\n    public CreditCard(int cardNumber, String cardHolderName, String expirationDate, String bankName) {\n        this.cardNumber = cardNumber;\n        this.cardHolderName = cardHolderName;\n        this.expirationDate = expirationDate;\n        this.bankName = bankName;\n    }\n\n    public CreditCard(String bankName) {\n        this.bankName = bankName;\n    }\n}\n</code></pre></p>"},{"location":"Tools%20and%20Libraries/Lombok/#tostring","title":"@ToString","text":"<p>The <code>@ToString</code> annotation generates the <code>toString()</code> method, simplifying object printing. </p> <p>Example with Lombok:  <pre><code>@ToString \npublic class CreditCard { \n    private String cardNumber; \n    private String cardholderName; \n    private String expirationDate; \n    }\n</code></pre></p> <p>Example without Lombok: <pre><code>public class CreditCard { \n    private String cardNumber; \n    private String cardholderName; \n    private String expirationDate; \n\n    @Override public String toString() { \n    return \"CreditCard(cardNumber=\" + this.cardNumber + \", cardholderName=\" \n    + this.cardholderName + \", expirationDate=\" + this.expirationDate + \")\"; \n    } \n}\n</code></pre></p>"},{"location":"Tools%20and%20Libraries/Lombok/#equalsandhashcode","title":"@EqualsAndHashCode","text":"<p>The <code>@EqualsAndHashCode</code> annotation can be applied to any class definition, enabling Lombok to automatically generate implementations of the <code>equals(Object other)</code> and <code>hashCode()</code> methods. By default, these generated methods consider all non-static, non-transient fields. However, you have the flexibility to tailor this behavior using two primary options. 1. Using <code>@EqualsAndHashCode.Include</code> and <code>@EqualsAndHashCode.Exclude</code>: These annotations can be selectively applied to specific type members, allowing you to include or exclude fields or methods from the generated <code>equals</code> and <code>hashCode</code> calculations.</p> <ol> <li>Using <code>@EqualsAndHashCode(onlyExplicitlyIncluded = true)</code> and <code>@EqualsAndHashCode.Include</code>: This combination allows you to precisely specify the fields or methods to be included in the generated methods.</li> </ol> <p>Example with Lombok: <pre><code>@Getter\n@Setter\n@AllArgsConstructor\n@NoArgsConstructor\n@EqualsAndHashCode \npublic class CreditCard { \n    private String cardNumber; \n    private String cardholderName; \n    private String expirationDate; }\n</code></pre></p> <p>Example without Lombok: <pre><code>public class CreditCard {\n    private String cardNumber;\n    private String cardholderName;\n    private String expirationDate;\n\n    public CreditCard(String cardNumber, String cardholderName, String expirationDate) {\n        this.cardNumber = cardNumber;\n        this.cardholderName = cardholderName;\n        this.expirationDate = expirationDate;\n    }\n\n    public String getCardNumber() {\n        return cardNumber;\n    }\n\n    public void setCardNumber(String cardNumber) {\n        this.cardNumber = cardNumber;\n    }\n\n    public String getCardholderName() {\n        return cardholderName;\n    }\n\n    public void setCardholderName(String cardholderName) {\n        this.cardholderName = cardholderName;\n    }\n\n    public String getExpirationDate() {\n        return expirationDate;\n    }\n\n    public void setExpirationDate(String expirationDate) {\n        this.expirationDate = expirationDate;\n    }\n\n    @Override\n    public int hashCode() {\n        final int prime = 31;\n        int result = 1;\n        result = prime * result + ((cardNumber == null) ? 0 : cardNumber.hashCode());\n        result = prime * result + ((cardholderName == null) ? 0 : cardholderName.hashCode());\n        result = prime * result + ((expirationDate == null) ? 0 : expirationDate.hashCode());\n        return result;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj)\n            return true;\n        if (obj == null || getClass() != obj.getClass())\n            return false;\n        CreditCard other = (CreditCard) obj;\n        return Objects.equals(cardNumber, other.cardNumber) &amp;&amp;\n               Objects.equals(cardholderName, other.cardholderName) &amp;&amp;\n               Objects.equals(expirationDate, other.expirationDate);\n    }\n}\n</code></pre></p> <p>If applying\u00a0<code>@EqualsAndHashCode</code>\u00a0to a class that extends another, this feature gets a bit trickier. Normally, auto-generating an\u00a0<code>equals</code>\u00a0and\u00a0<code>hashCode</code>\u00a0method for such classes is a bad idea, as the superclass also defines fields, which also need equals/hashCode code but this code will not be generated. For more details  check this documentation.</p>"},{"location":"Tools%20and%20Libraries/Lombok/#nonnull","title":"@NonNull","text":"<p>The <code>@NonNull</code> annotation generates null-checks for constructor parameters.</p> <p>Example with Lombok: <pre><code>public class CreditCard {     \n    private String cardNumber;     \n    private String cardholderName;     \n    private String expirationDate;      \n\n    public CreditCard(@NonNull String cardNumber, @NonNull String cardholderName, String expirationDate) {\n         this.cardNumber = cardNumber;         \n         this.cardholderName = cardholderName;         \n         this.expirationDate = expirationDate;}\n}\n</code></pre></p> <p>Example without Lombok: <pre><code>public class CreditCard {     \n    private String cardNumber;     \n    private String cardholderName;     \n    private String expirationDate;\n\n    public CreditCard(String cardNumber, String cardholderName, String expirationDate) {\n        if (cardNumber == null || cardholderName == null) {\n            throw new NullPointerException(\"cardNumber or cardholderName is marked @NonNull but is null\");         \n            }         \n        this.cardNumber = cardNumber;         \n        this.cardholderName = cardholderName;         \n        this.expirationDate = expirationDate;     \n        } \n}\n</code></pre></p>"},{"location":"Tools%20and%20Libraries/Lombok/#data","title":"@Data","text":"<p>The <code>@Data</code> annotation combines <code>@ToString</code>, <code>@EqualsAndHashCode</code>, <code>@Getter</code>, <code>@Setter</code>, and <code>@RequiredArgsConstructor</code>.</p> <p>With Lombok: <pre><code>@Data \npublic class CreditCard {\n    private final String cardNumber;\n    private String cardholderName;\n    private String expirationDate;\n}\n</code></pre></p> <p>Example without Lombok: <pre><code>public class CreditCard {     \n    private final String cardNumber;     \n    private String cardholderName;     \n    private String expirationDate;   \n\n    public CreditCard(String cardNumber) {         \n        this.cardNumber = cardNumber;     \n        }      \n    // Getters and setters \n\n    @Override     \n    public int hashCode() {         \n    // hashCode implementation     \n    }     \n\n    @Override     \n    public boolean equals(Object o) {         \n    // equals implementation     } \n    }\n}\n</code></pre></p>"},{"location":"Tools%20and%20Libraries/Lombok/#value","title":"@Value","text":"<p>The annotation <code>@Value</code> represents the immutable version of <code>@Data</code>. By default, Lombok designates all fields as private and final. It omits the generation of setters and declares the class as final, preventing inheritance. Much like <code>@Data</code>, it also generates implementations for <code>toString()</code>, <code>equals()</code>, and <code>hashCode()</code>.</p> <p>Example with Lombok: <pre><code>@Value\npublic class CreditCard { \n    private String cardNumber; \n    private String cardHolderName; \n    private String expirationDate; \n    }\n</code></pre></p> <p>Example without Lombok: <pre><code>public final class CreditCard {\n    private final String cardNumber;\n    private final String cardHolderName;\n    private final String expirationDate;\n\n    public CreditCard(String cardNumber, String cardHolderName, String expirationDate) {\n        this.cardNumber = cardNumber;\n        this.cardHolderName = cardHolderName;\n        this.expirationDate = expirationDate;\n    }\n\n    public String getCardNumber() {\n        return cardNumber;\n    }\n\n    public String getCardHolderName() {\n        return cardHolderName;\n    }\n\n    public String getExpirationDate() {\n        return expirationDate;\n    }\n\n    @Override \n    public int hashCode() {\n        final int PRIME = 31;\n        int result = 1;\n        result = prime * result + ((getCardNumber() == null) ? 0 : getCardNumber().hashCode());\n        result = prime * result + ((getCardHolderName() == null) ? 0 : getCardHolderName().hashCode());\n        result = prime * result + ((getExpirationDate() == null) ? 0 : getExpirationDate().hashCode());\n        return result;\n    }\n\n    @Override \n    public boolean equals(Object o) {\n        if (o == this) return true;\n        if (!(o instanceof CreditCard)) return false;\n        CreditCard other = (CreditCard) o;\n        if (!other.canEqual((Object)this)) return false;\n        if (this.getCardNumber() == null ? other.getCardNumber() != null : !this.getCardNumber().equals(other.getCardNumber())) return false;\n        if (this.getCardHolderName() == null ? other.getCardHolderName() != null : !this.getCardHolderName().equals(other.getCardHolderName())) return false;\n        if (this.getExpirationDate() == null ? other.getExpirationDate() != null : !this.getExpirationDate().equals(other.getExpirationDate())) return false;\n        return true;\n    }\n}\n</code></pre></p>"},{"location":"Tools%20and%20Libraries/Lombok/#sneakythrows","title":"@SneakyThrows","text":"<p>The <code>@SneakyThrows</code> annotation enables you to throw checked exceptions without explicitly declaring them in your method's <code>throws</code> clause, as you normally would. This annotation allows you to sidestep the need for mandatory <code>try-catch</code> blocks by handling checked exceptions silently. It's important to note that Lombok doesn't disregard, wrap, replace, or modify the thrown checked exception. Instead, it tricks the compiler. This works because, at the level of the JVM (Java Virtual Machine) class file, all exceptions can be thrown regardless of the <code>throws</code> clause in your methods. However, it's crucial to exercise caution when using this annotation, as it can be risky.  For detailed guidance on when and how to use it, refer to this page in the official Lombok documentation.</p> <p>Example with Lombok: <pre><code>public class SneakyThrowsDemo {\n    public static void main(String[] args) {\n        try {\n            doSomething();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    @SneakyThrows\n    public static void doSomething() {\n        throw new Exception(\"An exception occurred\");\n    }\n}\n</code></pre></p> <p>Example without Lombok: <pre><code>public class SneakyThrowsDemo {\n    public static void main(String[] args) {\n        try {\n            doSomething();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static void doSomething() {\n        try {\n            throw new Exception(\"An exception occurred\");\n        } catch (Exception e) {\n            // Handle or log the exception here\n            e.printStackTrace();\n        }\n    }\n}\n</code></pre> In this version, without the <code>@SneakyThrows</code> annotation, we manually surround the exception-throwing code with a <code>try-catch</code> block within the <code>doSomething()</code> method. This is to handle the checked exception <code>Exception</code> that is thrown.</p>"},{"location":"Tools%20and%20Libraries/Lombok/#builder","title":"<code>@Builder</code>","text":"<p>When you're faced with the task of creating objects following a step-by-step construction pattern, like <code>CreditCard.builder().cardNumber(\"1234567890123456\").cardholderName(\"John Doe\").expirationDate(\"12/24\").build();</code>, the <code>@Builder</code> annotation can come in handy. This becomes especially beneficial when dealing with classes that have numerous fields. Rather than using a constructor with an abundance of parameters, this approach provides a more readable alternative. By incorporating the <code>@Builder</code> annotation, you delegate the task of generating builders to Lombok.</p> <p>Applying the <code>@Builder</code> annotation to a class triggers Lombok to generate a class that adheres to the builder pattern mentioned earlier. For instance, if you annotate the <code>CreditCard</code> class, Lombok automatically produces a <code>CreditCardBuilder</code> class. Since your builder's behavior could be intricate or highly customized, Lombok provides several parameters to help you achieve your desired outcome. You can explore all these parameters here.</p> <p>Example with Lombok: <pre><code>@Builder\npublic class CreditCard {\n    private String cardNumber;\n    private String cardholderName;\n    private String expirationDate;\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        CreditCard creditCard = CreditCard.builder()\n            .cardNumber(\"1234567890123456\")\n            .cardholderName(\"John Doe\")\n            .expirationDate(\"12/24\")\n            .build();\n    }\n}\n</code></pre></p> <p>Example without Lombok: <pre><code>public class CreditCard {\n    private String cardNumber;\n    private String cardholderName;\n    private String expirationDate;\n\n    public CreditCard(String cardNumber, String cardholderName, String expirationDate) {\n        this.cardNumber = cardNumber;\n        this.cardholderName = cardholderName;\n        this.expirationDate = expirationDate;\n    }\n\n    // Getters and setters...\n}\n\npublic class CreditCardBuilder {\n    private String cardNumber;\n    private String cardholderName;\n    private String expirationDate;\n\n    public CreditCardBuilder cardNumber(String cardNumber) {\n        this.cardNumber = cardNumber;\n        return this;\n    }\n\n    public CreditCardBuilder cardholderName(String cardholderName) {\n        this.cardholderName = cardholderName;\n        return this;\n    }\n\n    public CreditCardBuilder expirationDate(String expirationDate) {\n        this.expirationDate = expirationDate;\n        return this;\n    }\n\n    public CreditCard build() {\n        return new CreditCard(cardNumber, cardholderName, expirationDate);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        CreditCard creditCard = new CreditCardBuilder()\n            .cardNumber(\"1234567890123456\")\n            .cardholderName(\"John Doe\")\n            .expirationDate(\"12/24\")\n            .build();\n    }\n}\n</code></pre> As you can see, Lombok's <code>@Builder</code> simplifies the creation of builder classes, reducing the boilerplate code and enhancing readability.</p>"},{"location":"Tools%20and%20Libraries/Lombok/#log","title":"<code>@Log</code>","text":"<p>Setting up a logger instance in each class for logging purposes is a common practice, often involving repetitive code. However, Lombok's <code>@Log</code> annotation offers a solution. When you annotate a class with <code>@Log</code>, Lombok takes care of generating a static final <code>log</code> field within the class.  This field is initialized according to your chosen logging library's requirements. Lombok provides a dedicated annotation for several popular logging frameworks, making it convenient for developers.  Example: - <code>@Log</code> - creates\u00a0<code>private static final java.util.logging.Logger log = java.util.logging.Logger.getLogger(LogExample.class.getName());</code> - <code>@Log4j2</code> - creates <code>private static final org.apache.logging.log4j.Logger log = org.apache.logging.log4j.LogManager.getLogger(LogExample.class);</code> - <code>@Slf4j</code> - <code>creates private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(LogExample.class);</code></p> <p>The complete list of supported frameworks can be found here.</p> <p></p>"},{"location":"Tools%20and%20Libraries/Lombok/#lombok-additional-info","title":"Lombok additional Info","text":"<ul> <li> <p>Lombok Project Official site</p> </li> <li> <p>Lombok tutorials:</p> <ul> <li>Java Lombok Tutorial by Amigoscode</li> </ul> </li> </ul>"},{"location":"Tools%20and%20Libraries/Markdown%20Tutorial/","title":"Markdown Tutorial","text":""},{"location":"Tools%20and%20Libraries/Markdown%20Tutorial/#headings","title":"Headings","text":"<pre><code># Heading level 1\n## Heading level 2\n### Heading level 3\n#### Heading level 4\n##### Heading level 5\n###### Heading level 6\n</code></pre>"},{"location":"Tools%20and%20Libraries/Markdown%20Tutorial/#heading-level-1","title":"Heading level 1","text":""},{"location":"Tools%20and%20Libraries/Markdown%20Tutorial/#heading-level-2","title":"Heading level 2","text":""},{"location":"Tools%20and%20Libraries/Markdown%20Tutorial/#heading-level-3","title":"Heading level 3","text":""},{"location":"Tools%20and%20Libraries/Markdown%20Tutorial/#heading-level-4","title":"Heading level 4","text":""},{"location":"Tools%20and%20Libraries/Markdown%20Tutorial/#heading-level-5","title":"Heading level 5","text":""},{"location":"Tools%20and%20Libraries/Markdown%20Tutorial/#heading-level-6","title":"Heading level 6","text":""},{"location":"Tools%20and%20Libraries/Markdown%20Tutorial/#paragraphs","title":"Paragraphs","text":"<p>To create paragraphs, use a blank line to separate one or more lines of text.</p>"},{"location":"Tools%20and%20Libraries/Markdown%20Tutorial/#line-breaks","title":"Line Breaks","text":"<pre><code>&lt;br&gt;\n</code></pre>"},{"location":"Tools%20and%20Libraries/Markdown%20Tutorial/#emphasis","title":"Emphasis","text":"<p><pre><code>__bold text__\n</code></pre> bold text</p> <p><pre><code>_Italic_\n</code></pre> Italic</p> <p><pre><code>___bold and italic___ \n</code></pre> bold and italic</p> <pre><code>&gt; Blockquotes with Multiple Paragraphs\n&gt; Line 2\n&gt; Line 3\n&gt; Line 4\n</code></pre> <p>Block quotes with Multiple Paragraphs Line 2 Line 3 Line 4</p> <p><pre><code>~~The world is flat.~~ We now know that the world is round.\n</code></pre> The world is flat. We now know that the world is round.</p> <p><pre><code>- [x] Write the press release\n- [ ] Update the website\n</code></pre> - [x] Write the press release - [ ] Update the website</p> <p><pre><code>I need to highlight these ==very important words==.\n</code></pre> I need to highlight these very important words.</p>"},{"location":"Tools%20and%20Libraries/Markdown%20Tutorial/#lists","title":"Lists","text":"<ol> <li>First item  </li> <li>Second item  <ol> <li>Second Item 1</li> <li>Second Item 2</li> </ol> </li> <li>Third item  </li> <li> <p>Fourth item</p> </li> <li> <p>First item  </p> </li> <li>Second item  </li> <li>Third item \u00a0\u00a0\u00a0\u00a0- Indented item \u00a0\u00a0\u00a0\u00a0- Indented item  </li> <li>Fourth item</li> </ol>"},{"location":"Tools%20and%20Libraries/Markdown%20Tutorial/#code-blocks","title":"Code Blocks","text":"<pre><code>{\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"age\": 25\n}\n</code></pre> <pre><code>public static void main(String[] args) {  \n    SpringApplication.run(SpringDataJpaTutorialApplication.class, args);  \n}\n</code></pre>"},{"location":"Tools%20and%20Libraries/Markdown%20Tutorial/#links","title":"Links","text":"<p>My favorite search engine is Duck Duck Go.</p>"},{"location":"Tools%20and%20Libraries/Markdown%20Tutorial/#urls-and-email-addresses","title":"URLs and Email Addresses","text":"<p>https://www.markdownguide.org fake@example.com</p>"},{"location":"Tools%20and%20Libraries/Markdown%20Tutorial/#horizontal-rules","title":"Horizontal Rules","text":""},{"location":"Tools%20and%20Libraries/Markdown%20Tutorial/#images","title":"Images","text":""},{"location":"Tools%20and%20Libraries/ZSH%20SHELL/","title":"ZSH Shell Configuration","text":"<p>I've created this tutorial to demonstrate how I use my Arch laptop for everyday work and to share  my configuration with others. This guide will help you set up and optimize your shell environment  for increased efficiency on your Ubuntu system. You'll learn how to install and configure Zsh,  Oh-My-Zsh, and the Powerlevel10k theme. These tools will greatly enhance your command-line experience  and streamline your everyday work.</p>"},{"location":"Tools%20and%20Libraries/ZSH%20SHELL/#what-is-zsh","title":"What is Zsh?","text":"<p><code>Zsh</code>, short for Z Shell, is a powerful and highly customizable Unix shell that can be used as an interactive login shell and as a powerful scripting language. It offers numerous features, including improved tab completion, better scripting capabilities, and a wide range of plugins and themes to enhance your terminal experience.</p>"},{"location":"Tools%20and%20Libraries/ZSH%20SHELL/#what-is-oh-my-zsh","title":"What is Oh-My-Zsh?","text":"<p><code>Oh-My-Zsh</code> is an open-source framework for managing your Zsh configuration. It comes with a wide variety of themes, plugins, and features designed to make your command-line interface more productive and enjoyable. Oh-My-Zsh simplifies the process of customizing Zsh and provides an easy way to add plugins and themes.</p> <p>Web Site - https://ohmyz.sh/</p>"},{"location":"Tools%20and%20Libraries/ZSH%20SHELL/#what-is-powerlevel10k","title":"What is Powerlevel10k?","text":"<p><code>Powerlevel10k</code> is a highly customizable Zsh theme designed to work seamlessly with Oh-My-Zsh.  It's known for its flexibility, speed, and eye-catching prompts. Powerlevel10k is feature-rich and  offers various prompt styles, colors, and a configuration wizard that allows you to customize your  terminal appearance to suit your preferences.</p> <p>GitHub - https://github.com/romkatv/powerlevel10k</p>"},{"location":"Tools%20and%20Libraries/ZSH%20SHELL/#installation-and-configuration","title":"Installation and Configuration","text":"<ol> <li> <p>check current shell  version <pre><code>echo $SHELL\n</code></pre></p> </li> <li> <p>install ZSH <pre><code>sudo pacman -Syu\nsudo pacman -S zsh\n</code></pre></p> </li> <li> <p>switch default shell from bash to zsh, then logout and log in <pre><code>chsh -s $(which zsh)\n</code></pre></p> </li> <li> <p>check current shell  version <pre><code>echo $SHELL\n</code></pre></p> </li> <li> <p>install oh-my-zsh via curl <pre><code>sh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\n</code></pre></p> </li> <li> <p>install Nerd Font -  https://www.nerdfonts.com/</p> </li> <li> <p>add Nerd Font in Konsole </p> </li> <li> <p>install powerlevel10k <pre><code>git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k\n</code></pre></p> </li> <li> <p>set <code>ZSH_THEME=\"powerlevel10k/powerlevel10k\"</code> in <code>~/.zshrc</code>.</p> </li> <li> <p>run powerlevel10k configuration wizard <pre><code>p10k configure\n</code></pre></p> </li> <li> <p>add zsh-syntax-highlighting plugin <pre><code>git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\n</code></pre></p> </li> <li> <p>add 'zsh-syntax-highlighting' in '.zshrc' file in PLUGINS</p> </li> <li> <p>add zsh-autosuggestions <pre><code>git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions\n</code></pre></p> </li> <li> <p>add 'zsh-autosuggestions' in '.zshrc'</p> </li> </ol>"}]}